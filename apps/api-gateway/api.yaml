openapi: 3.0.0
paths:
  "/api/v1/users":
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    get:
      operationId: "UsersController_readUsers"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "403":
          description: "403 response"
          content: { }
      x-amazon-apigateway-integration:
        httpMethod: POST #should be a POST https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-integrations.html
        uri: arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${users_lambda_arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy
  "/api/v1/users/{id}":
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content: { }
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    get:
      operationId: "UsersController_readUser"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "403":
          description: "403 response"
          content: { }
      x-amazon-apigateway-integration:
        httpMethod: POST #should be a POST https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-integrations.html
        uri: arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${users_lambda_arn}/invocations
        passthroughBehavior: when_no_match
        type: aws_proxy
info:
  title: Aws-Web-Server
  description: The Aws-Web-Server API
  version: '1.0'
  contact: {}
tags:
  - name: users
    description: ''
servers: []
components:
  schemas:
    UserEntity:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: User identifier
        email:
          type: string
          example: example@gmail.com
          description: User email url
        first_name:
          type: string
          example: John
          description: User first name
        second_name:
          type: string
          example: Doe
          description: User second name
        created_at:
          type: string
          example: '2023-01-02T12:00:00Z'
          description: User create timestamp
        updated_at:
          type: string
          example: '2023-01-02T12:00:00Z'
          description: User update timestamp
